services:
  webapp:
    image: gw/webapp
    restart: on-failure
    build:
      context: .
      dockerfile: docker/webapp.Dockerfile
    ports:
      - "8000:80"
    environment:
      REDIS_HOST: redis-stack
    depends_on:
      - redis-stack

  notifier:
    image: gw/notifier
    build:
      context: .
      dockerfile: docker/notifier.Dockerfile
    restart: on-failure
    environment:
      REDIS_HOST: redis-stack
    extra_hosts:
      # Let container can assecc ports served by host use the given host name.
      # The ip is docker network bridge 'docker0', you can check this by command:
      # ip addr show docker0
      # It usually be 172.17.0.1.
      # You can assume this ip is a network bridge connect internal sub network and host.
      #
      - "host.docker.internal:172.17.0.1"
    depends_on:
      - redis-stack

  postprocess:
    image: gw/postprocess
    build:
      context: .
      dockerfile: docker/postprocess.Dockerfile
    restart: on-failure
    environment:
      REDIS_HOST: redis-stack
    depends_on:
      - redis-stack

  dispatcher:
    image: gw/dispatcher
    build:
      context: .
      dockerfile: docker/dispatcher.Dockerfile
    restart: on-failure
    privileged: true
    environment:
      - REDIS_HOST=redis-stack
    volumes:
      # NOTE: change this path to where you put models before boot services.
      #
      # For example, if you put you models file in /models,
      # so it should be /models:/app/models:r
      #
      - /home/HwHiAiUser/gw-app/models:/app/models:r
      - /home/HwHiAiUser/gw-app/data:/app/data:r

      # NOTE: Do not change the following lines.
      #
      # Mount /dev folder with privilieged mode can give a way to access hardware for container.
      # Because we need to use accelerator when inference.
      - /dev:/dev:rw
      - /usr/local/dcmi:/usr/local/dcmi:rw
      - /usr/local/bin/npu-smi:/usr/local/bin/npu-smi:rw
      - /usr/local/Ascend/driver:/usr/local/Ascend/driver:rw

      - /etc/sys_version.conf:/etc/sys_version.conf:ro
      - /etc/hdcBasic.cfg:/etc/hdcBasic.cfg:ro
      - /usr/lib64/libaicpu_processer.so:/usr/lib64/libaicpu_processer.so:ro
      - /usr/lib64/libaicpu_prof.so:/usr/lib64/libaicpu_prof.so:ro
      - /usr/lib64/libaicpu_sharder.so:/usr/lib64/libaicpu_sharder.so:ro
      - /usr/lib64/libadump.so:/usr/lib64/libadump.so:ro
      - /usr/lib64/libtsd_eventclient.so:/usr/lib64/libtsd_eventclient.so:ro
      - /usr/lib64/libaicpu_scheduler.so:/usr/lib64/libaicpu_scheduler.so:ro
      - /usr/lib64/libcrypto.so.1.1:/usr/lib64/libcrypto.so.1.1:ro
      - /usr/lib64/libyaml-0.so.2:/usr/lib64/libyaml-0.so.2:ro
      - /usr/lib64/libdcmi.so:/usr/lib64/libdcmi.so:ro
      - /usr/lib64/libmpi_dvpp_adapter.so:/usr/lib64/libmpi_dvpp_adapter.so:ro
      - /usr/lib64/aicpu_kernels/:/usr/lib64/aicpu_kernels/:ro
      - /usr/lib64/libstackcore.so:/usr/lib64/libstackcore.so:ro
      - /var/slogd:/var/slogd:ro
      - /var/dmp_daemon:/var/dmp_daemon:ro
      - /etc/slog.conf:/etc/slog.conf:ro

    depends_on:
      - redis-stack

  redis-stack:
    image: redis:latest
    restart: on-failure
    ports:
      # Use port 6900 to access redis from host.
      - "6900:6379"
    volumes:
      - redis_data:/data

volumes:
  redis_data:
